const { PitchCollection, Mode} = require("./PitchCollection");

/**
 * A class containing static methods for working with pitchCollection and mode Objects
 */
class Music {
  /**
   * True is mode1 is equal to mode 2. False otherwise
   * @param {Mode} mode1 - a Mode object
   * @param {Mode} mode2 - a Mode object
   * @returns {Boolean} - True if and only if both modes have identifcal AbsolutePitch arrays
   */
  static compareModes(mode1, mode2) {
    // not implemented
  }

  /**
   * Generates all concrete modes of the pitch collection that match the given pitches.
   * @param {Array[Numbers]} collectionPitches - a non-empty array of abstract pitches where the difference between
   *    elements corresponds to the distance between the pitches in half-steps. Elements in the array must
   *    be strictly increasing.
   * @param {Array[Numbers]} givenPitches - a non-empty array of absolute pitches where each element is a number
   *    representing a pitch class where 0 is c, 1 is c-sharp/d-flat, ... , 11 is b . Elements in the array must
   *    be strictly increasing.
   * @param {Number} pitchCenter - (optional) a value corresponding to a pitch class that is defined the pitch Center
   *    of this tonality. If provided, output will only include modes that have this value as their pitch center
   * @returns {Array[Modes]} - an array of unique Mode objects generated by matching the given pitches to the pitch
   *    collection and producing the resulting relative modes
   */
  static generateModesFromPitchCollection(collectionPitches, givenPitches, pitchCenter) {
    // not implemented
  }

  /**
   * Filters a list of mode objects to include only modes that have a given pitch as their pitch center
   * @param {Array[Modes]} modes - an array of Mode objects
   * @param {Number} pitch - a number represting a pitch to filter the list by
   * @returns {Array[Modes]} - a new array object containing only the filtered modes
   */
  static filterModes(modes, pitchCenter) {
    // not implemented
  }


  /**
   * Filters out duplicate mode objects from a list of mode objects
   * @param {Array[Modes]} modes - an array of Mode objects 
   * @returns {Array[Modes]} - a new array object containing each unique mode provided
   */
  static removeDuplicates(modes) {
    // not implemented
  }

}

module.exports = {
  Music: Music
}